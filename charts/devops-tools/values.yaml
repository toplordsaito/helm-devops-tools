ingress-nginx:
  enabled: false
  controller:
    name: controller
    service:
      enabled: true
      appProtocol: true
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
        service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
        service.beta.kubernetes.io/aws-load-balancer-type: nlb
      labels: {}
      externalIPs: []
      loadBalancerSourceRanges: []
      enableHttp: true
      enableHttps: true
      ipFamilyPolicy: "SingleStack"
      ipFamilies:
        - IPv4
      ports:
        http: 80
        https: 443
      targetPorts:
        http: http
        https: https
      type: LoadBalancer
      external:
        enabled: true
      internal:
        enabled: false
        annotations: {}
        loadBalancerSourceRanges: []
sealed-secrets:
  enabled: false
  ingress:
    enabled: false

argocd-image-updater:
  enabled: true
  extraArgs:
    - --interval
    - 30s
    - --registries-conf-path
    - /app/config/registries.conf
  extraEnv:
    - name: AWS_REGION
      value: "ap-southeast-1"

  config:
    registries:
      - name: ECR
        api_url: https://00000000.dkr.ecr.ap-southeast-1.amazonaws.com
        prefix: 00000000.dkr.ecr.ap-southeast-1.amazonaws.com
        ping: yes
        insecure: no
        credentials: ext:/scripts/ecr-creds.sh
        credsexpire: 10h
  authScripts:
    enabled: true
    scripts:
      ecr-creds.sh: | # notice script name matches above
        #!/bin/sh
        aws ecr --region $AWS_REGION get-authorization-token --output text --query 'authorizationData[].authorizationToken' | base64 -d
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::00000000:role/argo-image-updater
    name: "argocd-image-updater"